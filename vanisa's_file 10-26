import cv2
'''
cv2 will allow us to use image reading functions that 
load the image into our workspace. 

To begin, we need to 
read the image, (cv2.imread)
convert to grayscale (cv2.cvtColor)
apply edge detection (Canny or Sobel edge)

'''

def load_image(image_path):
    image = cv2.imread(image_path)
    #put in image path when we get the library 
    image = cv2.cvtColor(image, cv2.COLORBGR@RGB) 
    #converting image to RGB for display
    return image
    #will add more stuff when we get all of our images!


def display_image(image, title = "Picture"):
    cv2.imshow(title, image)
    cv2.waitKey(0)  # Wait until a key is pressed
    cv2.destroyAllWindows()  # Close all OpenCV windows

#image = load_image(image link)
#display_image(image, 'original pic')

# sobel edge detection
def sobel_edge_detection(UIimage):

    # Convert image to grayscale
    gray = cv2.cvtColor(UIimage, cv2.COLOR_BGR2GRAY)

    # Calculate Sobel gradients
    sobelx = cv2.Sobel(gray, cv2.CV_64F, 1, 0, ksize=3)  # x-direction
    sobely = cv2.Sobel(gray, cv2.CV_64F, 0, 1, ksize=3)  # y-direction

    # Combine gradients and convert to uint8
    sobel_combined = cv2.magnitude(sobelx, sobely)
    sobel_combined = cv2.convertScaleAbs(sobel_combined)
    return sobel_combined

# Main workflow
if __name__ == "__main__":
    image_path = 'path_to_image.jpg'  # Replace with the actual image path

    try:
        # Load the original image
        original_image = load_image(image_path)
        display_image(original_image, "Original Image")

        # Apply Sobel edge detection
        sobel_edges = sobel_edge_detection(original_image)
        display_image(sobel_edges, "Sobel Edge Detection")

    except FileNotFoundError as e:
        print(e)
